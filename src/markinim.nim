import std/[asyncdispatch, logging, options, os, times, strutils, strformat, tables, random, sets, parsecfg, sequtils, streams, sugar, re, algorithm]
from std/unicode import runeOffset
import pkg/norm/[model, sqlite]
import pkg/[telebot, owoifynim, emojipasta]
import pkg/nimkov/[generator, objects, typedefs, constants]

import database
import utils/[unixtime, timeout, listen, as_emoji, get_owoify_level, human_bytes, random_emoji]
import quotes/quote

var L = newConsoleLogger(fmtStr="$levelname | [$time] ", levelThreshold = Level.lvlAll)

var
  conn {.threadvar.}: DbConn
  admins {.threadvar.}: HashSet[int64]
  banned {.threadvar.}: HashSet[int64]
  markovs {.threadvar.}: Table[int64, (int64, MarkovGenerator)] # (chatId): (timestamp, MarkovChain)
  adminsCache {.threadvar.}: Table[(int64, int64), (int64, bool)] # (chatId, userId): (unixtime, isAdmin) cache
  chatSessions {.threadvar.}: Table[int64, (int64, Session)] # (chatId): (unixtime, Session) cache
  antiFlood {.threadvar.}: Table[int64, seq[int64]]
  keepLast: int = 1500
  quoteConfig {.threadvar.}: QuoteConfig
let uptime = epochTime()

const
  root = currentSourcePath().parentDir()
  MARKOV_DB = "markov.db"

  ANTIFLOOD_SECONDS = 10
  ANTIFLOOD_RATE = 6

  MARKOV_SAMPLES_CACHE_TIMEOUT = 60 * 30 # 30 –º–∏–Ω—É—Ç
  GROUP_ADMINS_CACHE_TIMEOUT = 60 * 5 # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –ø—è—Ç–∏ –º–∏–Ω—É—Ç
  MARKOV_CHAT_SESSIONS_TIMEOUT = 60 * 30 # 30 –º–∏–Ω—É—Ç

  MAX_SESSIONS = 20
  MAX_FREE_SESSIONS = 5
  MAX_SESSION_NAME_LENGTH = 16

  UNALLOWED = "–í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É"
  CREATOR_STRING = " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ @Markinim)"
  SETTINGS_TEXT = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /percentage, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sessions, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏—è–º–∏."
  HELP_TEXT = staticRead(root / "help.md")
  PRIVACY_TEXT = staticRead(root / "privacy.md")


let
  SfwRegex = re(
    (block:
      const words = staticRead(root / "premium/bad-words.csv").strip(chars = {' ', '\n', '\r'})
      words.split("\n").join("|")),
    flags = {reIgnoreCase, reStudy},
  )

  UrlRegex = re(r"""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\".,<>?¬´¬ª‚Äú‚Äù‚Äò‚Äô]))""", flags = {reIgnoreCase, reStudy})
  UsernameRegex = re("@([a-zA-Z](_(?!_)|[a-zA-Z0-9]){3,32}[a-zA-Z0-9])", flags = {reIgnoreCase, reStudy})

template get(self: Table[int64, (int64, MarkovGenerator)], chatId: int64): MarkovGenerator =
  self[chatId][1]

proc echoError(args: varargs[string]) =
  for arg in args:
    write(stderr, arg)
  write(stderr, '\n')
  flushFile(stderr)

proc getThread(message: types.Message): int =
  result = -1
  if (message.messageThreadId.isSome and
      message.isTopicMessage.isSome and
      message.isTopicMessage.get):
    result = message.messageThreadId.get

proc mention(user: database.User): string =
  return &"[{user.userId}](tg://user?id={user.userId})"

proc isMessageOk(session: Session, text: string): bool =
  {.cast(gcsafe).}:
    if text.strip() == "":
      return false
    elif session.chat.keepSfw and text.find(SfwRegex) != -1:
      return false
    elif session.chat.blockLinks and text.find(UrlRegex) != -1:
      return false
    elif session.chat.blockUsernames and text.find(UsernameRegex) != -1:
      return false
    return true

proc isFlood(chatId: int64, rate: int = ANTIFLOOD_RATE, seconds: int = ANTIFLOOD_SECONDS): bool =
  let time = unixTime()
  if chatId notin antiFlood:
    antiFlood[chatId] = @[time]
  else:
    antiFlood[chatId].add(time)

  antiFlood[chatId] = antiFlood[chatId].filterIt(time - it < seconds)
  return len(antiFlood[chatId]) > rate

proc getCachedSession*(conn: DbConn, chatId: int64): database.Session {.gcsafe.} =
  if chatId in chatSessions:
    let (_, session) = chatSessions[chatId]
    return session

  result = conn.getDefaultSession(chatId)
  chatSessions[chatId] = (unixTime(), result)

proc refillMarkov(conn: DbConn, session: Session) =
  for message in conn.getLatestMessages(session = session, count = keepLast):
    if session.isMessageOk(message.text):
      markovs.get(session.chat.chatId).addSample(message.text, asLower = not session.caseSensitive)

proc cleanerWorker {.async.} =
  while true:
    let
      time = unixTime()
      antiFloodKeys = antiFlood.keys.toSeq()

    for chatId in antiFloodKeys:
      let messages = antiFlood[chatId].filterIt(time - it < ANTIFLOOD_SECONDS)
      if len(messages) != 0:
        antiFlood[chatId] = antiFlood[chatId].filterIt(time - it < ANTIFLOOD_SECONDS)
      else:
        antiFlood.del(chatId)
    
    let adminsCacheKeys = adminsCache.keys.toSeq()
    for record in adminsCacheKeys:
      let (timestamp, _) = adminsCache[record]
      if time - timestamp > GROUP_ADMINS_CACHE_TIMEOUT:
        adminsCache.del(record)
    
    let markovsKeys = markovs.keys.toSeq()
    for record in markovsKeys:
      let (timestamp, _) = markovs[record]
      if time - timestamp > MARKOV_SAMPLES_CACHE_TIMEOUT:
        markovs.del(record)

    let chatSessionsKeys = chatSessions.keys.toSeq()
    for record in chatSessionsKeys:
      let (timestamp, _) = chatSessions[record]
      if time - timestamp > MARKOV_CHAT_SESSIONS_TIMEOUT:
        chatSessions.del(record)

    await sleepAsync(30)

proc isAdminInGroup(bot: Telebot, chatId: int64, userId: int64): Future[bool] {.async.} =
  let time = unixTime()
  if (chatId, userId) in adminsCache:
    let (_, isAdmin) = adminsCache[(chatId, userId)]
    return isAdmin

  try:
    let member = await bot.getChatMember(chatId = $chatId, userId = userId.int)
    result = member.status == "creator" or member.status == "administrator"
  except Exception:
    result = false

  adminsCache[(chatId, userId)] = (time, result)


type KeyboardInterrupt = ref object of CatchableError
proc handler() {.noconv.} =
  raise KeyboardInterrupt(msg: "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ")
setControlCHook(handler)


proc byLength(a, b: string): int = cmp(len(a), len(b))
proc trimUnicode(s: string, length: int): string =
  let offset = s.runeOffset(length)
  if offset == -1:
    return s
  return s[0 ..< offset]
proc sortCandidates(options: seq[string], length: int): seq[string] =
  var options = options
  options.sort(byLength)
  options.reverse()

  for i in 0 ..< options.len:
    if options[i].len > length:
      options[i] = options[i].trimUnicode(length)

  return options


proc showSessions(bot: Telebot, chatId, messageId: int64, sessions: seq[Session] = @[]) {.async.} =
  var sessions = sessions
  if sessions.len == 0:
    sessions = conn.getSessions(chatId = chatId)
  let defaultSession = conn.getDefaultSession(chatId)

  discard await bot.editMessageText(chatId = $chatId,
    messageId = int(messageId),
    text = "*–¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.* –û—Ç–ø—Ä–∞–≤—å—Ç–µ /delete, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é.",
    replyMarkup = newInlineKeyboardMarkup(
      sessions.mapIt(
        @[InlineKeyboardButton(text: (if it.isDefault or it.uuid == defaultSession.uuid: &"üé© {it.name}" else: it.name) & &" - {conn.getMessagesCount(it)}",
            callbackData: some &"set_{chatId}_{it.uuid}")]
      ) & @[InlineKeyboardButton(text: "–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é", callbackData: some &"addsession_{chatId}")]
    ),
    parseMode = "markdown",
  )

proc getSettingsKeyboard(session: Session): InlineKeyboardMarkup =
  let chatId = session.chat.chatId
  return newInlineKeyboardMarkup(
    @[
      InlineKeyboardButton(text: &"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–º–µ–Ω–∞ {asEmoji(not session.chat.blockUsernames)}", callbackData: some &"usernames_{chatId}"),
      InlineKeyboardButton(text: &"–°—Å—ã–ª–∫–∏ {asEmoji(not session.chat.blockLinks)}", callbackData: some &"links_{chatId}"),
    ],
    @[
      InlineKeyboardButton(text: &"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SFW {asEmoji(session.chat.keepSfw)}", callbackData: some &"sfw_{chatId}")
    ],
    @[
      InlineKeyboardButton(text: &"–û—Ç–∫–ª—é—á–∏—Ç—å /markov {asEmoji(session.chat.markovDisabled)}", callbackData: some &"markov_{chatId}"),
      InlineKeyboardButton(text: &"–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã {asEmoji(session.chat.quotesDisabled)}", callbackData: some &"quotes_{chatId}"),
    ],
    @[
      InlineKeyboardButton(text: &"[–ë–ï–¢–ê] –ß—Ç–æ –±—ã —Ç—ã –ø—Ä–µ–¥–ø–æ—á–µ–ª {asEmoji(not session.chat.pollsDisabled)}", callbackData: some &"polls_{chatId}"),
    ],
    @[
      InlineKeyboardButton(text: "–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Å—Å–∏–∏:", callbackData: some"nothing"),
    ],
    @[
      InlineKeyboardButton(text: &"–≠–º–æ–¥–∂–∏–ø–∞—Å—Ç–∞ {asEmoji(session.emojipasta)}", callbackData: some &"emojipasta_{chatId}_{session.uuid}"),
      InlineKeyboardButton(text: &"–û–≤–æ—Ñ–∞–π {asEmoji(session.owoify)}", callbackData: some &"owoify_{chatId}_{session.uuid}"),
    ],
    @[
      InlineKeyboardButton(text: &"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É {asEmoji(session.caseSensitive)}", callbackData: some &"casesensivity_{chatId}_{session.uuid}"),
    ],
    @[
      InlineKeyboardButton(text: &"–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç—ã {asEmoji(session.alwaysReply)}", callbackData: some &"alwaysreply_{chatId}_{session.uuid}"),
    ],
    @[
      InlineKeyboardButton(text: &"–°–ª—É—á–∞–π–Ω–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è {asEmoji(session.randomReplies)}", callbackData: some &"randomreplies_{chatId}_{session.uuid}"),
    ],
    @[
      InlineKeyboardButton(text: &"–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ {asEmoji(session.learningPaused)}", callbackData: some &"pauselearning_{chatId}_{session.uuid}"),
    ],
  )

proc handleCommand(bot: Telebot, update: Update, command: string, args: seq[string], dbUser: database.User) {.async, gcsafe.} =
  let
    message = update.message.get
    senderId = int64(message.fromUser.get().id)
    threadId = getThread(message)

  let senderAnonymousAdmin: bool = message.senderChat.isSome and message.chat.id == message.senderChat.get.id
  template isSenderAdmin: bool =
    senderAnonymousAdmin or await bot.isAdminInGroup(chatId = message.chat.id, userId = senderId)

  case command:
  of "start":
    const startMessage = (
      "–ü—Ä–∏–≤–µ—Ç, —è —É—á—É—Å—å –Ω–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Å—Ç–∞—Ä–∞—é—Å—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /enable, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–µ–Ω—è –∑–¥–µ—Å—å ·óú·¥ó·óú" &
      "\n–°–º–æ—Ç—Ä–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ /privacy –¥–ª—è –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
    )
    if message.chat.id != senderId: # /start —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°
      if len(args) > 0:
        if args[0] == "enable":
          discard await bot.sendMessage(message.chat.id, startMessage, messageThreadId=threadId)
        else:
          discard await bot.sendMessage(message.chat.id, startMessage, messageThreadId=threadId)
      return

    discard await bot.sendMessage(message.chat.id,
      startMessage,
      replyMarkup = newInlineKeyboardMarkup(@[InlineKeyboardButton(text: "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è :D", url: some &"https://t.me/{bot.username}?startgroup=enable")]),
      messageThreadId=threadId,
    )
  of "deleteme":
    if message.chat.id != senderId: # /deleteme —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°
      return

    if len(args) > 0 and args[0] == "confirm":
      let count = conn.deleteAllMessagesFromUser(userId = senderId)
      discard await bot.sendMessage(message.chat.id,
        &"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ `{count}` —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!" &
        "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –≤ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –º–∞—Ä–∫–æ–≤–∞, –æ–Ω–∏ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç (–º–∞–∫—Å–∏–º—É–º —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)" &
        "\n–ï—Å–ª–∏ —ç—Ç–æ —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –±–æ—Ç–∞.",
        parseMode = "markdown",
        messageThreadId=threadId)
      return

    let count = conn.getTotalUserMessagesCount(userId = senderId)
    discard await bot.sendMessage(message.chat.id,
      &"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í—ã —É–≤–µ—Ä–µ–Ω—ã? –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/deleteme confirm`, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
      parseMode = "markdown",
      messageThreadId=threadId,
    )
  of "help":
    if message.chat.kind.endswith("group") and not isSenderAdmin:
      return
    discard await bot.sendMessage(message.chat.id, HELP_TEXT, parseMode = "markdown", messageThreadId=threadId)
  of "privacy":
    if message.chat.id != senderId: # /privacy —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°
      return
    discard await bot.sendMessage(message.chat.id,
      PRIVACY_TEXT,
      parseMode = "markdown",
      messageThreadId=threadId)
  of "admin", "unadmin", "remadmin":
    if len(args) < 1:
      return
    elif senderId notin admins:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    try:
      let userId = parseBiggestInt(args[0])
      discard conn.setAdmin(userId = userId, admin = (command == "admin"))
      
      if command == "admin":
        admins.incl(userId)
      else:
        admins.excl(userId)

      discard await bot.sendMessage(message.chat.id,
        if command == "admin": &"–£—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω [{userId}](tg://user?id={userId})"
        else: &"–£—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω [{userId}](tg://user?id={userId})",
        parseMode = "markdown",
        messageThreadId=threadId)
    except Exception as error:
      discard await bot.sendMessage(
        message.chat.id,
        &"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <code>{$typeof(error)}: {getCurrentExceptionMsg()}</code>",
        parseMode = "html",
        messageThreadId=threadId)
  of "botadmins":
    if senderId notin admins:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    let admins = conn.getBotAdmins()

    discard await bot.sendMessage(message.chat.id,
      "*–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞:*\n" &
      admins.mapIt("~ " & it.mention).join("\n"),
      parseMode = "markdown",
      messageThreadId=threadId,
    )
  of "count", "stats":
    if senderId notin admins:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    var statsMessage = &"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: `{conn.getCount(database.User)}`\n" &
      &"*–ß–∞—Ç—ã*: `{conn.getCount(database.Chat)}`\n" &
      &"*–°–æ–æ–±—â–µ–Ω–∏—è*: `{conn.getCount(database.Message)}`\n" &
      &"*–°–µ—Å—Å–∏–∏*: `{conn.getCount(database.Session)}`\n" &
      &"*–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏*: `{len(chatSessions)}`\n" &
      &"*–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–æ–≤—ã*: `{len(markovs)}`\n" &
      &"*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã*: `{toInt(epochTime() - uptime)}`s\n" &
      &"*–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö*: `{humanBytes(getFileSize(DATA_FOLDER / MARKOV_DB))}`\n" &
      &"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (getOccupiedMem)*: `{humanBytes(getOccupiedMem())}`\n" &
      &"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (getTotalMem)*: `{humanBytes(getTotalMem())}`\n"

    if command == "stats":
      statsMessage &= &"\n\n*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏*:\n{GC_getStatistics()}"
    discard await bot.sendMessage(message.chat.id,
      statsMessage,
      parseMode = "markdown",
      messageThreadId=threadId)
  of "banpeer", "unbanpeer":
    const banCommand = "banpeer"

    if len(args) < 1:
      return
    elif senderId notin admins:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    try:
      let peerId = parseBiggestInt(args[0])
      if peerId == senderId:
        discard await bot.sendMessage(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è", messageThreadId=threadId)
        return
      elif peerId < 0:
        discard conn.setBanned(chatId = peerId, banned = (command == banCommand))
      else:
        discard conn.setBanned(userId = peerId, banned = (command == banCommand))

      if command == banCommand:
        banned.incl(peerId)
      else:
        banned.excl(peerId)

      discard await bot.sendMessage(message.chat.id,
        if command == banCommand: &"–£—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω [{peerId}](tg://user?id={peerId})"
        else: &"–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω [{peerId}](tg://user?id={peerId})",
        parseMode = "markdown",
        messageThreadId=threadId)
    except Exception as error:
      discard await bot.sendMessage(
        message.chat.id,
        &"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <code>{$typeof(error)}: {getCurrentExceptionMsg()}</code>",
        parseMode = "html",
        messageThreadId=threadId)
  of "enable", "disable":
    if message.chat.kind.endswith("group") and not isSenderAdmin:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    discard conn.setEnabled(message.chat.id, enabled = (command == "enable"))

    if message.chat.kind.endswith("group"):
      discard await bot.sendMessage(message.chat.id,
        if command == "enable": "–û–±—É—á–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ"
        else: "–û–±—É—á–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /enable.",
        messageThreadId=threadId,
      )
    else:
      discard await bot.sendMessage(message.chat.id,
        if command == "enable": "–û–±—É—á–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ"
        else: "–û–±—É—á–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /enable." &
          "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –±–æ—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –æ–±—É—á–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö, –≥–¥–µ —ç—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ.",
        messageThreadId=threadId,
      )
  of "sessions":
    if message.chat.kind.endswith("group") and not isSenderAdmin:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    discard conn.getDefaultSession(message.chat.id)
    let sessions = conn.getSessions(message.chat.id)
    discard await bot.sendMessage(message.chat.id,
      "*–¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.* –û—Ç–ø—Ä–∞–≤—å—Ç–µ /delete, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é.",
      replyMarkup = newInlineKeyboardMarkup(
        sessions.mapIt(
          @[InlineKeyboardButton(text: (if it.isDefault: &"üé© {it.name}" else: it.name) & &" - {conn.getMessagesCount(it)}",
              callbackData: some &"set_{message.chat.id}_{it.uuid}")]
        ) & @[InlineKeyboardButton(text: "–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é", callbackData: some &"addsession_{message.chat.id}")]
      ),
      parseMode = "markdown",
      messageThreadId=threadId,
    )
  of "percentage":
    if message.chat.kind.endswith("group") and not isSenderAdmin:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    var chat = conn.getOrInsert(database.Chat(chatId: message.chat.id))
    if len(args) == 0:
      discard await bot.sendMessage(message.chat.id,
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç. –ü—Ä–∏–º–µ—Ä: `/percentage 40` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `30`)\n" &
        &"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: `{chat.percentage}`%",
        parseMode = "markdown",
        messageThreadId=threadId)
      return

    try:
      let percentage = parseInt(args[0].strip(chars = Whitespace + {'%'}))

      if percentage notin 0 .. 100:
        discard await bot.sendMessage(message.chat.id, "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100", messageThreadId=threadId)
        return

      chat.percentage = percentage
      conn.update(chat)

      discard await bot.sendMessage(message.chat.id,
        &"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ `{percentage}`%",
        parseMode = "markdown",
        messageThreadId=threadId)
    except ValueError:
      discard await bot.sendMessage(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º", messageThreadId=threadId)
  of "markov", "quote":
    let enabled = conn.getOrInsert(database.Chat(chatId: message.chat.id)).enabled
    if not enabled:
      discard bot.sendMessage(
        message.chat.id,
        "–û–±—É—á–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /enable (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø)",
        messageThreadId=threadId)
      return

    let cachedSession = conn.getCachedSession(message.chat.id)

    if cachedSession.chat.markovDisabled or (command == "quote" and cachedSession.chat.quotesDisabled):
      if not isSenderAdmin:
        return
    
    if not markovs.hasKey(message.chat.id):
      markovs[message.chat.id] = (unixTime(), newMarkov(@[]))
      conn.refillMarkov(cachedSession)

    if len(markovs.get(message.chat.id).samples) == 0:
      discard await bot.sendMessage(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", messageThreadId=threadId)
      return

    var start = args.join(" ")
    if not cachedSession.caseSensitive:
      start = start.toLower()

    let options = if len(args) > 0 and (args[0] != mrkvEnd or len(args) >= 2):
        newMarkovGenerateOptions(begin = some start)
      else:
        newMarkovGenerateOptions()

    {.cast(gcsafe).}:
      let generator = markovs.get(message.chat.id)
      let generated = try:
          generator.generate(options = options)
        except MarkovGenerateError:
          generator.generate()

    if generated.isSome:
      var text = generated.get()
      if cachedSession.owoify != 0:
        {.cast(gcsafe).}:
          text = text.owoify(getOwoifyLevel(cachedSession.owoify))
      if cachedSession.emojipasta:
        {.cast(gcsafe).}:
          text = emojify(text)
      
      var replyToMessageId = 0
      if message.replyToMessage.isSome():
        replyToMessageId = message.replyToMessage.get().messageId

      if command == "markov":
        discard await bot.sendMessage(message.chat.id, text, messageThreadId=threadId, replyToMessageId = replyToMessageId)
      elif command == "quote" and not isFlood(message.chat.id, rate = 5, seconds = 10):
        {.cast(gcsafe).}:
          let quotePic = genQuote(
            text = text,
            config = quoteConfig,
          )
        discard await bot.sendPhoto(message.chat.id, "file://" & quotePic, replyToMessageId = replyToMessageId)
        discard tryRemoveFile(quotePic)
    else:
      discard await bot.sendMessage(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", messageThreadId=threadId)
  of "wouldyourather":
    let enabled = conn.getOrInsert(database.Chat(chatId: message.chat.id)).enabled
    if not enabled:
      discard bot.sendMessage(
        message.chat.id,
        "–û–±—É—á–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /enable (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø)",
        messageThreadId=threadId)
      return

    let cachedSession = conn.getCachedSession(message.chat.id)

    if cachedSession.chat.pollsDisabled:
      if not isSenderAdmin:
        return
    
    if not markovs.hasKey(message.chat.id):
      markovs[message.chat.id] = (unixTime(), newMarkov(@[]))
      conn.refillMarkov(cachedSession)

    if len(markovs.get(message.chat.id).samples) < 10:
      discard await bot.sendMessage(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞ '—á—Ç–æ –±—ã —Ç—ã –ø—Ä–µ–¥–ø–æ—á–µ–ª'", messageThreadId=threadId)
      return

    let generator = markovs.get(message.chat.id)
    var options: seq[string]
    for i in 0 ..< 10:
      {.cast(gcsafe).}:
        let generated = generator.generate()
      if generated.isSome:
        var text = generated.get()
        if cachedSession.owoify != 0:
          {.cast(gcsafe).}:
            text = text.owoify(getOwoifyLevel(cachedSession.owoify))
        if cachedSession.emojipasta:
          {.cast(gcsafe).}:
            text = emojify(text)
        options.add(text)
      else:
        break

    options = options.deduplicate(isSorted = false)
    options = options.sortCandidates(length = 100)

    if len(options) < 2:
      discard await bot.sendMessage(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞ '—á—Ç–æ –±—ã —Ç—ã –ø—Ä–µ–¥–ø–æ—á–µ–ª'", messageThreadId=threadId)
      return

    var isAnon: bool = false
    if args.len > 0 and args[0] == "anon":
      isAnon = true

    discard await bot.sendPoll(
      chatId = message.chat.id,
      question = &"{randomEmoji()} –ß—Ç–æ –±—ã –≤—ã –ø—Ä–µ–¥–ø–æ—á–ª–∏...",
      options = options[0 ..< 2],
      messageThreadId = threadId,
      isAnonymous = isAnon,  # –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ –∑–Ω–∞—é –ø–æ—á–µ–º—É
    )
  #[ of "export":
    if senderId notin admins:
      # discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return
    let tmp = getTempDir()
    copyFileToDir(DATA_FOLDER / MARKOV_DB, tmp)
    discard await bot.sendDocument(senderId, "file://" & (tmp / MARKOV_DB))
    discard tryRemoveFile(tmp / MARKOV_DB) ]#
  of "settings":
    if message.chat.kind.endswith("group") and not isSenderAdmin:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return

    let session = conn.getCachedSession(message.chat.id)
    discard await bot.sendMessage(message.chat.id,
      SETTINGS_TEXT,
      replyMarkup = getSettingsKeyboard(session),
      parseMode = "markdown",
      messageThreadId=threadId,
    )
    return
  of "distort":
    discard
  of "hazmat":
    discard
  of "delete":
    var deleting {.global, threadvar.}: HashSet[int64]

    if message.chat.kind.endswith("group") and not isSenderAdmin:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return
    elif message.chat.id in deleting:
      discard await bot.sendMessage(
        message.chat.id,
        "–Ø —É–∂–µ —É–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
        messageThreadId=threadId)
    elif len(args) > 0 and args[0].toLower() == "confirm":
      try:
        deleting.incl(message.chat.id)
        let 
          sentMessage = await bot.sendMessage(message.chat.id, "–Ø —É–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏...", messageThreadId=threadId)
          defaultSession = conn.getCachedSession(message.chat.id)
          deleted = conn.deleteMessages(session = defaultSession)

        if markovs.hasKey(message.chat.id):
          markovs.del(message.chat.id)
        
        if chatSessions.hasKey(message.chat.id):
          chatSessions.del(message.chat.id)

        if conn.getSessionsCount(chatId = message.chat.id) > 1:
          conn.delete(defaultSession.dup)
          chatSessions[message.chat.id] = (unixTime(), conn.getCachedSession(chatId = message.chat.id))

        discard await bot.editMessageText(chatId = $message.chat.id, messageId = sentMessage.messageId,
          text = &"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ `{deleted}` —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
          parseMode = "markdown"
        )
        return
      except Exception as error:
        discard await bot.sendMessage(
          message.chat.id,
          text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞." & CREATOR_STRING,
          replyToMessageId = message.messageId,
          messageThreadId=threadId)
        raise error
      finally:
        deleting.excl(message.chat.id)
    else:
      discard await bot.sendMessage(message.chat.id,
        "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ (—Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/delete confirm`. *–ü–†–ò–ú–ï–ß–ê–ù–ò–ï*: –≠—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å",
        parseMode = "markdown",
        messageThreadId=threadId)
  of "deletefrom", "delfrom", "delete_from", "del_from":
    if not message.chat.kind.endswith("group"):
      discard await bot.sendMessage(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö", messageThreadId=threadId)
      return
    if not isSenderAdmin:
      discard await bot.sendMessage(message.chat.id, UNALLOWED, messageThreadId=threadId)
      return
    elif len(args) > 0 or message.replyToMessage.isSome():
      try:
        var userId: int64
        try:
          userId = if len(args) > 0:
              parseBiggestInt(args[0])
            elif message.replyToMessage.get().fromUser.isSome():
              message.replyToMessage.get().fromUser.get().id
            elif message.replyToMessage.get().senderChat.isSome():
              message.replyToMessage.get().senderChat.get().id
            else:
              discard await bot.sendMessage(chatId = message.chat.id,
                text = &"–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. {CREATOR_STRING}",
                messageThreadId=threadId,
              )
              return
        except ValueError:
          discard await bot.sendMessage(chatId = message.chat.id,
            text = "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ù–µ–≤–µ—Ä–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è).",
            messageThreadId=threadId,
          )
          return

        let defaultSession = conn.getCachedSession(message.chat.id)

        if conn.getUserMessagesCount(defaultSession, userId) < 1:
          discard await bot.sendMessage(chatId = message.chat.id,
            text = &"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π —á–∞—Ç-—Å–µ—Å—Å–∏–∏. ",
            messageThreadId=threadId,
          )
          return

        let 
          sentMessage = await bot.sendMessage(
            message.chat.id,
            "–Ø —É–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏...",
            messageThreadId=threadId)
          deleted = conn.deleteFromUserInChat(session = defaultSession, userId = userId)

        if markovs.hasKey(message.chat.id):
          markovs.del(message.chat.id)

        discard await bot.editMessageText(chatId = $message.chat.id, messageId = sentMessage.messageId,
          text = &"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ `{deleted}` —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –º–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
          parseMode = "markdown"
        )
        return
      except Exception as error:
        discard await bot.sendMessage(
          message.chat.id,
          text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?). –û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞." & CREATOR_STRING,
          replyToMessageId = message.messageId,
          messageThreadId=threadId)
        raise error
    else:
      discard await bot.sendMessage(message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ `/delfrom user_id` –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞. *–ü–†–ò–ú–ï–ß–ê–ù–ò–ï*: –≠—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å",
        parseMode = "markdown",
        messageThreadId=threadId)


proc handleCallbackQuery(bot: Telebot, update: Update) {.async, gcsafe.} =
  let
    callback = update.callbackQuery.get()
    userId = callback.fromUser.id
    data = callback.data.get()
  
  let
    splitted = data.split('_')
    command = splitted[0]
    args = splitted[1 .. ^1]
  
  try:
    block callbackBlock:
      template editSettings =
        discard await bot.editMessageText(chatId = $callback.message.get().chat.id,
          messageId = callback.message.get().messageId,
          text = SETTINGS_TEXT,
          replyMarkup = getSettingsKeyboard(session),
          parseMode = "markdown",
        )

      template adminCheck =
        let chatId = callback.message.get().chat.id
        if callback.message.get().chat.kind.endswith("group") and not await bot.isAdminInGroup(chatId = chatId, userId = userId):
          discard await bot.answerCallbackQuery(callback.id, UNALLOWED, showAlert = true)
          return

      case command: 
      of "set":
        if len(args) < 2:
          discard await bot.answerCallbackQuery(callback.id, "–û—à–∏–±–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", showAlert = true)
          break callbackBlock

        let
          chatId = parseBiggestInt(args[0])
          uuid = args[1]

        adminCheck()

        let default = conn.getCachedSession(chatId = chatId)
        if default.uuid == uuid:
          discard await bot.answerCallbackQuery(callback.id, "–≠—Ç–æ —É–∂–µ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞", showAlert = true)
          break callbackBlock

        let sessions = conn.setDefaultSession(chatId = chatId, uuid = uuid)
        var newSession = sessions.filterIt(it.isDefault)

        if newSession.len < 1:
          let defaultSession = conn.getDefaultSession(chatId)
          newSession.add(defaultSession)

        chatSessions[chatId] = (unixTime(), newSession[0])

        markovs[chatId] = (unixTime(), newMarkov(
          conn.getLatestMessages(session = newSession[0], count = keepLast)
          .filterIt(newSession[0].isMessageOk(it.text))
          .mapIt(it.text), asLower = not newSession[0].caseSensitive)
        )

        await bot.showSessions(chatId = callback.message.get().chat.id,
          messageId = callback.message.get().messageId,
          sessions = sessions)

        discard await bot.answerCallbackQuery(callback.id, "–ì–æ—Ç–æ–≤–æ", showAlert = true)
      of "addsession":
        adminCheck()
        let chatId = parseBiggestInt(args[0])

        discard await bot.answerCallbackQuery(callback.id)

        let chat = conn.getChat(chatId = chatId)
        var sessionsCount = conn.getSessionsCount(chatId)

        if sessionsCount >= MAX_FREE_SESSIONS or (sessionsCount >= MAX_SESSIONS and not chat.premium):
          let currentMax = if chat.premium: MAX_SESSIONS else: MAX_FREE_SESSIONS
          discard await bot.editMessageText(chatId = $callback.message.get().chat.id,
            messageId = callback.message.get().messageId,
            text = &"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ {currentMax} —Å–µ—Å—Å–∏–π –Ω–∞ —á–∞—Ç.",
          )
          break callbackBlock

        discard await bot.editMessageText(chatId = $callback.message.get().chat.id,
          messageId = callback.message.get().messageId,
          text = "*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.* –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
          parseMode = "markdown",
        )

        try:
          var message = (await getMessage(userId = userId, chatId = chatId)).message.get()
          while not message.text.isSome or message.caption.isSome:
            message = (await getMessage(userId = userId, chatId = chatId)).message.get()
          let text = if message.text.isSome: message.text.get else: message.caption.get()

          if text.toLower().startswith("/cancel"):
            discard await bot.editMessageText(chatId = $callback.message.get().chat.id,
              messageId = callback.message.get().messageId,
              text = "*–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞...*",
              parseMode = "markdown",
            )
            await sleepAsync(3 * 1000)
            discard await bot.deleteMessage(chatId = $callback.message.get().chat.id,
              messageId = callback.message.get().messageId,
            )
            break callbackBlock
          elif text.len > MAX_SESSION_NAME_LENGTH:
            discard await bot.editMessageText(chatId = $callback.message.get().chat.id,
              messageId = callback.message.get().messageId,
              text = &"*–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞...* –ò–º—è —Å–µ—Å—Å–∏–∏ –¥–ª–∏–Ω–Ω–µ–µ —á–µ–º `{MAX_SESSION_NAME_LENGTH}` —Å–∏–º–≤–æ–ª–æ–≤",
              parseMode = "markdown",
            )
            break callbackBlock
          
          sessionsCount = conn.getSessionsCount(chatId)
          if sessionsCount >= MAX_FREE_SESSIONS or (sessionsCount >= MAX_SESSIONS and not chat.premium):
            let currentMax = if chat.premium: MAX_SESSIONS else: MAX_FREE_SESSIONS
            discard await bot.editMessageText(chatId = $callback.message.get().chat.id,
              messageId = callback.message.get().messageId,
              text = &"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ {currentMax} —Å–µ—Å—Å–∏–π –Ω–∞ —á–∞—Ç.",
            )
          else:
            discard conn.addSession(Session(name: text, chat: conn.getChat(chatId)))
            await bot.showSessions(chatId = callback.message.get().chat.id, messageId = callback.message.get().messageId)
        except TimeoutError:
          discard await bot.deleteMessage(chatId = $callback.message.get().chat.id,
            messageId = callback.message.get().messageId,
          )
      of "nothing":
        discard await bot.answerCallbackQuery(callback.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è! ‚òîÔ∏è", showAlert = true)
        return
      of "usernames":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.chat.blockUsernames = not session.chat.blockUsernames
        conn.update(session.chat)
        editSettings()
      of "links":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.chat.blockLinks = not session.chat.blockLinks
        conn.update(session.chat)
        editSettings()
      of "markov":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.chat.markovDisabled = not session.chat.markovDisabled
        conn.update(session.chat)
        editSettings()
      of "quotes":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.chat.quotesDisabled = not session.chat.quotesDisabled
        conn.update(session.chat)
        editSettings()
      of "polls":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.chat.pollsDisabled = not session.chat.pollsDisabled
        conn.update(session.chat)
        editSettings()
      of "casesensivity":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.caseSensitive = not session.caseSensitive
        conn.update(session)
        editSettings()
      of "alwaysreply":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.alwaysReply = not session.alwaysReply
        conn.update(session)
        editSettings()
      of "randomreplies":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.randomReplies = not session.randomReplies
        conn.update(session)
        editSettings()
      of "pauselearning":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.learningPaused = not session.learningPaused
        conn.update(session)
        editSettings()
      of "sfw":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.chat.keepSfw = not session.chat.keepSfw
        conn.update(session.chat)
        editSettings()
        discard await bot.answerCallbackQuery(callback.id,
          "–ì–æ—Ç–æ–≤–æ! –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!",
          showAlert = true,
        )
        return
      of "owoify":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.owoify = (session.owoify + 1) mod 4
        conn.update(session)
        editSettings()
      of "emojipasta":
        adminCheck()
        var session = conn.getCachedSession(parseBiggestInt(args[0]))
        session.emojipasta = not session.emojipasta
        conn.update(session)
        editSettings()

    # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    discard await bot.answerCallbackQuery(callback.id, "–ì–æ—Ç–æ–≤–æ!")
  except IOError as err:
    if "message is not modified" in err.msg:
      discard await bot.answerCallbackQuery(callback.id, "–ì–æ—Ç–æ–≤–æ!")
      return
    discard await bot.answerCallbackQuery(callback.id, "üòî –û –Ω–µ—Ç, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–®–ò–ë–ö–ê, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. " & CREATOR_STRING, showAlert = true)
    raise err

proc updateHandler(bot: Telebot, update: Update): Future[bool] {.async, gcsafe.} =
  if await listenUpdater(bot, update):
    return
  if not (update.message.isSome or update.callbackQuery.isSome):
      return true

  try:
    if update.callbackQuery.isSome:
      let msgUser = update.callbackQuery.get().fromUser
      if msgUser.id in banned:
        return true

      await handleCallbackQuery(bot, update)
      return true
    elif not update.message.isSome:
      return true

    let response = update.message.get
    if response.text.isSome or response.caption.isSome:
      let
        msgUser = response.fromUser.get
        chatId = response.chat.id
        threadId = getThread(response)
      if msgUser.id notin admins and chatId in banned or msgUser.id in banned:
        return true

      var
        text = if response.text.isSome: response.text.get else: response.caption.get
        splitted = text.split()
        command = splitted[0].strip(chars = {'/'}, trailing = false)
        args = if len(splitted) > 1: splitted[1 .. ^1] else: @[]

      let user = conn.getOrInsert(database.User(userId: msgUser.id))

      if text.startswith('/'):
        if msgUser.id notin admins and isFlood(chatId):
          return true

        if '@' in command:
          let splittedCommand = command.split('@')
          if splittedCommand[^1].toLower() != bot.username.toLower():
            return true
          command = splittedCommand[0]
        await handleCommand(bot, update, command, args, user)
        return true

      let chat = conn.getOrInsert(database.Chat(chatId: chatId))
      if not chat.enabled:
        return

      let cachedSession = conn.getCachedSession(chatId)

      if not cachedSession.isMessageOk(text):
        return

      # –í—Å–µ–≥–¥–∞ —É—á–∏—Ç–µ—Å—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      if not markovs.hasKeyOrPut(chatId, (unixTime(), newMarkov(@[]))):
        conn.refillMarkov(cachedSession)
      else:
        markovs.get(chatId).addSample(text, asLower = not cachedSession.caseSensitive)

      conn.addMessage(database.Message(text: text, sender: user, session: conn.getCachedSession(chat.chatId)))

      var percentage = chat.percentage
      let replyMessage = update.message.get().replyToMessage
      
      let repliedToMarkinim = replyMessage.isSome() and replyMessage.get().fromUser.isSome and replyMessage.get().fromUser.get().id == bot.id

      if repliedToMarkinim:
        percentage *= 2

      if (rand(1 .. 100) <= percentage or (percentage > 0 and repliedToMarkinim and cachedSession.alwaysReply)) and not isFlood(chatId, rate = 10, seconds = 30):
        # –ú–∞–∫—Å 10 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç –∑–∞ 30 —Å–µ–∫—É–Ω–¥

        {.cast(gcsafe).}:
          let generated = markovs.get(chatId).generate()
        if generated.isSome:
          var text = generated.get()
          if cachedSession.owoify != 0:
            {.cast(gcsafe).}:
              text = text.owoify(getOwoifyLevel(cachedSession.owoify))
          if cachedSession.emojipasta:
            {.cast(gcsafe).}:
              text = emojify(text)

          if not cachedSession.chat.quotesDisabled and rand(0 .. 30) == 20:
            # –°–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
            {.cast(gcsafe).}:
              let quotePic = genQuote(
                text = text,
                config = quoteConfig,
              )
            discard await bot.sendPhoto(chat.chatId, "file://" & quotePic)
            discard tryRemoveFile(quotePic)
          else:
            if repliedToMarkinim or (rand(1 .. 100) <= (percentage div 2) and cachedSession.randomReplies):
              discard await bot.sendMessage(chatId, text, replyToMessageId = response.messageId, messageThreadId=threadId)
            else:
              discard await bot.sendMessage(chatId, text, messageThreadId=threadId)
  except IOError as error:
    if "Bad Request: have no rights to send a message" in error.msg or "not enough rights to send text messages to the chat" in error.msg:
      try:
        if update.message.isSome():
          let chatId = update.message.get().chat.id
          discard await bot.leaveChat(chatId = $chatId)
      except: discard
    echoError &"[ERROR] | " & $error.name & ": " & error.msg & ";"
  except Exception as error:
    echoError &"[ERROR] | " & $error.name & ": " & error.msg & ";"
  except:
    echoError "[ERROR] –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"


proc main {.async.} =
  let
    configFile = root / "../secret.ini"
    config = if fileExists(configFile): loadConfig(configFile)
      else: loadConfig(newStringStream())
    botToken = config.getSectionValue("config", "token", getEnv("BOT_TOKEN"))
    admin = config.getSectionValue("config", "admin", getEnv("ADMIN_ID"))
    loggingEnabled = config.getSectionValue("config", "logging", getEnv("LOGGING")).strip() == "1"

  if botToken == "":
    echoError "[ERROR]: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ secret.ini –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    quit(1)

  keepLast = parseInt(config.getSectionValue("config", "keeplast", getEnv("KEEP_LAST", $keepLast)))

  conn = initDatabase(MARKOV_DB)
  defer: conn.close()

  quoteConfig = getQuoteConfig()

  if admin != "":
    admins.incl(conn.setAdmin(userId = parseBiggestInt(admin)).userId)
  
  for admin in conn.getBotAdmins():
    admins.incl(admin.userId)

  for bannedUser in conn.getBannedUsers():
    banned.incl(bannedUser.userId)

  let bot = newTeleBot(botToken)
  bot.username = (await bot.getMe()).username.get().strip()
  echoError "–†–∞–±–æ—Ç–∞... –ò–º—è –±–æ—Ç–∞: ", bot.username

  if loggingEnabled:
    addHandler(L)
  else:
    echoError "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é [LOGGING=1 in .env] –∏–ª–∏ [logging = 1 in secret.ini], –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"

  asyncCheck cleanerWorker()
  bot.onUpdate(updateHandler)
  discard await bot.getUpdates(offset = -1)

  while true:
    try:
      await bot.pollAsync(timeout = 100, clean = true)
    except:  #  Exception, Defect, IndexDefect
      echoError "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
      echoError "getCurrentExceptionMsg(): ", getCurrentExceptionMsg()
      await sleepAsync(5000) # —Å–ø–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞


when isMainModule:
  when defined(windows):
    # –≠—Ç–æ—Ç –ø–∞—Å—Ö–∞–ª—å–Ω—ã–π —è–π—Ü–æ —Å–ª–µ–¥—É–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    if CompileDate != now().format("yyyy-MM-dd"):
      echoError "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –Ω–∞ windows –ø–æ—Å–ª–µ –¥–Ω—è"
      quit(1)

  try:
    waitFor main()
  except KeyboardInterrupt:
    echo "\n–í—ã—Ö–æ–¥...\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ ", toInt(epochTime() - uptime), " —Å–µ–∫—É–Ω–¥."
    quit(0)
